component,text
"DonutChart","Component: DonutChart\nImport: src/design-system/DonutChart.tsx\n\nProps:\n  -- segments\n     Values: Type: DonutChartSegment[]\n     Description: Array of segment definitions\n\n  -- size\n     Values: Default: 200\n     Description: Diameter of the chart in px\n\n  -- thickness\n     Values: Default: 18\n     Description: Stroke thickness in px\n\n  -- rounded\n     Values: Default: true\n     Description: Round line cap for segments\n\n  -- label\n     Values: Type: ReactNode\n     Description: Main label displayed at the centre\n\n  -- subLabel\n     Values: Type: ReactNode\n     Description: Secondary label under the main label\n\n  -- labelFontSize\n     Values: Default: 26\n     Description: Font size (px) for main label\n\n  -- subLabelFontSize\n     Values: Default: 16\n     Description: Font size (px) for sub-label\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Default\n     Tags: autodocs, story\n     Snippet:\n       export const Default: Story = {\n         args: {\n           segments: [\n             { value: 40, color: '#FF6384' },\n             { value: 30, color: '#36A2EB' },\n             { value: 20, color: '#FFCE56' },\n             { value: 10, color: '#4BC0C0' },\n           ],\n           size: 200,\n           label: '100',\n           subLabel: 'Total',\n         },\n       }; \n     Example:\n       const DefaultExample = () => (\n         <DonutChart {...{\n           segments: [\n             { value: 40, color: '#FF6384' },\n             { value: 30, color: '#36A2EB' },\n             { value: 20, color: '#FFCE56' },\n             { value: 10, color: '#4BC0C0' },\n           ],\n           size: 200,\n           label: '100',\n           subLabel: 'Total',\n         },\n       }} />\n       );\n"
"GaugeChartOrbit","Component: GaugeChartOrbit\nImport: src/design-system/GaugeChartOrbit.tsx\n\nProps:\n  -- size\n     Values: Default: 192\n     Description: Size of the outer diameter in px\n\n  -- thickness\n     Values: Default: 18\n     Description: Thickness of the gauge arc\n\n  -- segments\n     Values: Type: GaugeSegment[] | undefined\n     Description: Array of segments (if provided, multi-segment mode). Optional if using pointer mode.\n\n  -- gapDegrees\n     Values: Default: 2\n     Description: Gap between segments in degrees\n\n  -- startAngle\n     Values: Default: -140\n     Description: Start angle (deg) for the gauge (default -140)\n\n  -- endAngle\n     Values: Default: 140\n     Description: End angle (deg) for the gauge (default 140)\n\n  -- trackColor\n     Values: Default: #E4E7EB\n     Description: Background track color\n\n  -- label\n     Values: Type: ReactNode\n     Description: Label inside gauge\n\n  -- subLabel\n     Values: Type: ReactNode\n     Description: Sub label\n\n  -- labelFontSize\n     Values: Default: 26\n     Description: Label font sizes\n\n  -- subLabelFontSize\n     Values: Default: 16\n     Description: N/A\n\n  -- value\n     Values: Type: number | undefined\n     Description: Direct progress value (0..max) for single-color pointer style\n\n  -- min\n     Values: Default: 0\n     Description: Minimum value for pointer gauge\n\n  -- max\n     Values: Default: 100\n     Description: Maximum value for pointer gauge\n\n  -- pointerColor\n     Values: Type: string | undefined\n     Description: Pointer color (defaults to first segment color or theme primary)\n\n  -- ticks\n     Values: Default: [0, 30, 60, 90, 120]\n     Description: Show major tick labels around arc (pointer mode)\n\n  -- minorTickCount\n     Values: Default: 40\n     Description: Minor tick count between min and max (pointer mode)\n\n  -- tickFormatter\n     Values: Default: (v) => `${v}`\n     Description: Tick label formatter\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Pointer\n     Tags: autodocs, story\n     Snippet:\n       export const Pointer: Story = {\n         args: {\n           value: 65,\n           min: 0,\n           max: 120,\n           label: 'Speed',\n           subLabel: 'mph',\n         },\n       };\n       \n     Example:\n       const PointerExample = () => (\n         <GaugeChartOrbit {...{\n           value: 65,\n           min: 0,\n           max: 120,\n           label: 'Speed',\n           subLabel: 'mph',\n         },\n       }} />\n       );\n\n  -- Story: Segments\n     Tags: autodocs, story\n     Snippet:\n       export const Segments: Story = {\n         args: {\n           segments: [\n             { value: 30, color: '#47A9F6' },\n             { value: 20, color: '#FFCE56' },\n             { value: 10, color: '#FF6384' },\n           ],\n           label: 'Usage',\n         },\n       }; \n     Example:\n       const SegmentsExample = () => (\n         <GaugeChartOrbit {...{\n           segments: [\n             { value: 30, color: '#47A9F6' },\n             { value: 20, color: '#FFCE56' },\n             { value: 10, color: '#FF6384' },\n           ],\n           label: 'Usage',\n         },\n       }} />\n       );\n"
"MultiRingGauge","Component: MultiRingGauge\nImport: src/design-system/MultiRingGauge.tsx\n\nProps:\n  -- size\n     Values: Default: 320\n     Description: Gauge diameter (px)\n\n  -- thickness\n     Values: Default: 20\n     Description: Thickness of each ring\n\n  -- ringSpacing\n     Values: Default: 12\n     Description: Spacing between rings\n\n  -- gapAngle\n     Values: Default: 20\n     Description: Gap angle in degrees between start and end\n\n  -- rings\n     Values: Type: GaugeRing[]\n     Description: Rings data outerâ†’inner order\n\n  -- label\n     Values: Type: ReactNode\n     Description: Center label\n\n  -- subLabel\n     Values: Type: ReactNode\n     Description: Sub-label\n\n  -- trackColor\n     Values: Default: #FFFFFF\n     Description: Track color\n\n  -- labelFontSize\n     Values: Default: 40\n     Description: Font sizes\n\n  -- subLabelFontSize\n     Values: Default: 24\n     Description: N/A\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Default\n     Tags: autodocs, story\n     Snippet:\n       export const Default: Story = {\n         args: {\n           rings: [\n             { progress: 0.8, color: '#47A9F6' },\n             { progress: 0.6, color: '#FFCE56' },\n             { progress: 0.4, color: '#4BC0C0' },\n           ],\n           label: '3/5',\n           subLabel: 'tasks',\n         },\n       }; \n     Example:\n       const DefaultExample = () => (\n         <MultiRingGauge {...{\n           rings: [\n             { progress: 0.8, color: '#47A9F6' },\n             { progress: 0.6, color: '#FFCE56' },\n             { progress: 0.4, color: '#4BC0C0' },\n           ],\n           label: '3/5',\n           subLabel: 'tasks',\n         },\n       }} />\n       );\n"
"PieChart","Component: PieChart\nImport: src/design-system/PieChart.tsx\n\nProps:\n  -- segments\n     Values: Type: PieChartSegment[]\n     Description: Slices of the pie\n\n  -- size\n     Values: Default: 180\n     Description: SVG viewbox size (px)\n\n  -- label\n     Values: Type: ReactNode\n     Description: Optional label rendered in the centre\n\n  -- subLabel\n     Values: Type: ReactNode\n     Description: Optional secondary label\n\n  -- labelFontSize\n     Values: Default: 26\n     Description: Font size for label\n\n  -- subLabelFontSize\n     Values: Default: 16\n     Description: Font size for sub-label\n\n  -- gapDegrees\n     Values: Default: 0\n     Description: Degrees of gap between slices (dynamic variant)\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Default\n     Tags: autodocs, story\n     Snippet:\n       export const Default: Story = {\n         args: {\n           segments: [\n             { value: 50, color: '#47A9F6' },\n             { value: 30, color: '#FFCE56' },\n             { value: 20, color: '#FF6384' },\n           ],\n           label: 'Report',\n         },\n       }; \n     Example:\n       const DefaultExample = () => (\n         <PieChart {...{\n           segments: [\n             { value: 50, color: '#47A9F6' },\n             { value: 30, color: '#FFCE56' },\n             { value: 20, color: '#FF6384' },\n           ],\n           label: 'Report',\n         },\n       }} />\n       );\n"
"SliderChart","Component: SliderChart\nImport: src/design-system/SliderChart.tsx\n\nProps:\n  -- value\n     Values: Type: number | undefined\n     Description: N/A\n\n  -- onChange\n     Values: Type: ((v: number) => void) | undefined\n     Description: N/A\n\n  -- formatSubLabel\n     Values: Default: (v) => Math.round(v)\n     Description: N/A\n\n  -- size\n     Values: Type: number | undefined\n     Description: Size of the outer diameter in px\n\n  -- thickness\n     Values: Type: number | undefined\n     Description: Thickness of the gauge arc\n\n  -- gapDegrees\n     Values: Type: number | undefined\n     Description: Gap between segments in degrees\n\n  -- startAngle\n     Values: Type: number | undefined\n     Description: Start angle (deg) for the gauge (default -140)\n\n  -- endAngle\n     Values: Type: number | undefined\n     Description: End angle (deg) for the gauge (default 140)\n\n  -- trackColor\n     Values: Type: string | undefined\n     Description: Background track color\n\n  -- label\n     Values: Type: ReactNode\n     Description: Label inside gauge\n\n  -- labelFontSize\n     Values: Type: number | undefined\n     Description: Label font sizes\n\n  -- subLabelFontSize\n     Values: Type: number | undefined\n     Description: N/A\n\n  -- min\n     Values: Default: 0\n     Description: Minimum value for pointer gauge\n\n  -- max\n     Values: Default: 100\n     Description: Maximum value for pointer gauge\n\n  -- pointerColor\n     Values: Type: string | undefined\n     Description: Pointer color (defaults to first segment color or theme primary)\n\n  -- ticks\n     Values: Type: number[] | undefined\n     Description: Show major tick labels around arc (pointer mode)\n\n  -- minorTickCount\n     Values: Type: number | undefined\n     Description: Minor tick count between min and max (pointer mode)\n\n  -- tickFormatter\n     Values: Type: ((v: number) => string) | undefined\n     Description: Tick label formatter\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Default\n     Tags: autodocs, story\n     Snippet:\n       export const Default: Story = {\n         args: {\n           value: 45,\n           min: 0,\n           max: 100,\n           label: 'Score',\n         },\n       }; \n     Example:\n       const DefaultExample = () => (\n         <SliderChart {...{\n           value: 45,\n           min: 0,\n           max: 100,\n           label: 'Score',\n         },\n       }} />\n       );\n"
"VerticalDividerGroup","Component: VerticalDividerGroup\nImport: src/design-system/VerticalDividerGroup.tsx\n\nProps:\n  -- dividerHeight\n     Values: Default: 1000\n     Description: N/A\n\n  -- dividerColor\n     Values: Default: #5c5c5c99\n     Description: N/A\n\n  -- dividerMargin\n     Values: Default: 16\n     Description: N/A\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Default\n     Tags: autodocs, story\n     Snippet:\n       export const Default = {\n         render: () => (\n           <VerticalDividerGroup dividerHeight={32}>\n             <Typography variant=""body1"">Item One</Typography>\n             <Typography variant=""body1"">Item Two</Typography>\n             <Typography variant=""body1"">Item Three</Typography>\n           </VerticalDividerGroup>\n         ),\n       }; \n"
"RmaxButton","Component: RmaxButton\nImport: src/design-system/Routemax/RmaxButton.tsx\n\nProps:\n  -- children\n     Values: Type: ReactNode\n     Description: The content of the component.\n\n  -- disabled\n     Values: Type: boolean | undefined\n     Description: If `true`, the component is disabled.\n\n  -- sx\n     Values: Type: SxProps<Theme> | undefined\n     Description: The system prop that allows defining system overrides as well as additional CSS styles.\n\n  -- color\n     Values: Type: enum\n     Description: The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n\n  -- fullWidth\n     Values: Type: boolean | undefined\n     Description: If `true`, the button will take up the full width of its container.\n\n  -- href\n     Values: Type: string | undefined\n     Description: The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.\n\n  -- size\n     Values: Type: enum\n     Description: The size of the component.\n`small` is equivalent to the dense button styling.\n\n  -- variant\n     Values: Default: primary\n     Description: N/A\n\n  -- type\n     Values: Type: enum\n     Description: N/A\n\n  -- onClick\n     Values: Type: ((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined\n     Description: N/A\n\n  -- leftIcon\n     Values: Type: ReactNode\n     Description: N/A\n\n  -- rightIcon\n     Values: Type: ReactNode\n     Description: N/A\n\n  -- component\n     Values: Type: ElementType<any, keyof IntrinsicElements> | undefined\n     Description: N/A\n\n  -- loading\n     Values: Default: false\n     Description: N/A\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Primary\n     Tags: autodocs, story\n     Snippet:\n       export const Primary: Story = {\n         args: {\n           variant: 'primary',\n           children: 'Primary Button',\n         },\n       };\n       \n     Example:\n       const PrimaryExample = () => (\n         <RmaxButton {...{\n           variant: 'primary',\n           children: 'Primary Button',\n         },\n       }} />\n       );\n\n  -- Story: Outlined\n     Tags: autodocs, story\n     Snippet:\n       export const Outlined: Story = {\n         args: {\n           variant: 'outlined',\n           children: 'Outlined Button',\n         },\n       };\n       \n     Example:\n       const OutlinedExample = () => (\n         <RmaxButton {...{\n           variant: 'outlined',\n           children: 'Outlined Button',\n         },\n       }} />\n       );\n\n  -- Story: Text\n     Tags: autodocs, story\n     Snippet:\n       export const Text: Story = {\n         args: {\n           variant: 'text',\n           children: 'Text Button',\n         },\n       }; \n     Example:\n       const TextExample = () => (\n         <RmaxButton {...{\n           variant: 'text',\n           children: 'Text Button',\n         },\n       }} />\n       );\n"
"RmaxGrid","Component: RmaxGrid\nImport: src/design-system/Routemax/RmaxGrid.tsx\n\nProps:\n  -- columns\n     Values: Type: any[] | undefined\n     Description: Column definitions for AG Grid. If not provided, a default 3-column grid is shown.\n\n  -- rows\n     Values: Type: any[] | undefined\n     Description: Row data for AG Grid. If not provided, a default 2-row grid is shown.\n\n  -- onRowsChange\n     Values: Type: ((rows: any[]) => void) | undefined\n     Description: Callback when row data changes (e.g. add/remove row/col). Receives new row data.\n\n  -- onColumnsChange\n     Values: Type: ((columns: any[]) => void) | undefined\n     Description: Callback when column definitions change (e.g. add/remove col). Receives new columns.\n\n  -- hideToolbar\n     Values: Type: boolean | undefined\n     Description: Hide the built-in toolbar (for full custom control)\n\n  -- height\n     Values: Default: 400\n     Description: Height of the grid (default 400)\n\n  -- agGridProps\n     Values: Default: {}\n     Description: Any extra props for AgGridReact\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Default\n     Tags: autodocs, story\n     Snippet:\n       export const Default = {\n         args: {\n           columns: [\n             { headerName: 'Make', field: 'make' },\n             { headerName: 'Model', field: 'model' },\n             { headerName: 'Price', field: 'price' },\n           ],\n           rows: [\n             { make: 'Toyota', model: 'Celica', price: 35000 },\n             { make: 'Ford', model: 'Mondeo', price: 32000 },\n           ],\n           height: 300,\n         },\n       }; \n     Example:\n       const DefaultExample = () => (\n         <RmaxGrid {...{\n           columns: [\n             { headerName: 'Make', field: 'make' },\n             { headerName: 'Model', field: 'model' },\n             { headerName: 'Price', field: 'price' },\n           ],\n           rows: [\n             { make: 'Toyota', model: 'Celica', price: 35000 },\n             { make: 'Ford', model: 'Mondeo', price: 32000 },\n           ],\n           height: 300,\n         },\n       }} />\n       );\n"
"RmaxTabBar","Component: RmaxTabBar\nImport: src/design-system/Routemax/RmaxTabBar.tsx\n\nProps:\n  -- tabs\n     Values: Type: { label: string; value: string | number; icon?: ReactNode; disabled?: boolean | undefined; sx?: SxProps<Theme> | undefined; }[]\n     Description: Array of tab labels or objects with label, icon, and value\n\n  -- value\n     Values: Type: string | number\n     Description: The value of the currently selected tab\n\n  -- onChange\n     Values: Type: (event: SyntheticEvent<Element, Event>, value: string | number) => void\n     Description: Callback when a tab is selected\n\n  -- showSettingsIcon\n     Values: Type: boolean | undefined\n     Description: Optional: Show a settings icon on the right\n\n  -- onSettingsClick\n     Values: Type: (() => void) | undefined\n     Description: Optional: Callback for settings icon click\n\n  -- rightContent\n     Values: Type: ReactNode\n     Description: Optional: Custom right content (e.g., user menu)\n\n  -- leftContent\n     Values: Type: ReactNode\n     Description: Optional: Custom left content (e.g., logo)\n\n  -- sx\n     Values: Type: SxProps<Theme> | undefined\n     Description: Optional: sx for the root container\n\n  -- actions\n     Values: Type: RmaxTabBarActionsProps | undefined\n     Description: Optional: Tab bar actions (settings, upload, help, cached)\n\n  -- component\n     Values: Type: ElementType<any, keyof IntrinsicElements> | undefined\n     Description: N/A\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Default\n     Tags: autodocs, story\n     Snippet:\n       export const Default: Story = {\n         render: (args: RmaxTabBarProps) => {\n           const [value, setValue] = React.useState(args.value);\n           return <RmaxTabBar {...args} value={value} onChange={(e, v) => setValue(v)} />;\n         },\n         args: {\n           value: 'overview',\n           tabs: [\n             { label: 'Overview', value: 'overview' },\n             { label: 'Details', value: 'details' },\n             { label: 'Settings', value: 'settings', disabled: true },\n           ],\n           actions: {\n             actions: [\n               { icon: <Upload />, tooltip: 'Upload', onClick: () => {}, color: 'white', hoverColor: 'white' },\n               { icon: <Settings />, tooltip: 'Settings', onClick: () => {}, color: 'white', hoverColor: 'white' },\n             ],\n             iconSize: 'small',\n             gap: 1,\n           },\n         },\n       }; \n     Example:\n       const DefaultExample = () => (\n         <React {...{\n           value: 'overview',\n           tabs: [\n             { label: 'Overview', value: 'overview' },\n             { label: 'Details', value: 'details' },\n             { label: 'Settings', value: 'settings', disabled: true },\n           ],\n           actions: {\n             actions: [\n               { icon: <Upload />, tooltip: 'Upload', onClick: () => {}, color: 'white', hoverColor: 'white' },\n               { icon: <Settings />, tooltip: 'Settings', onClick: () => {}, color: 'white', hoverColor: 'white' },\n             ],\n             iconSize: 'small',\n             gap: 1,\n           },\n         },\n       }} />\n       );\n"
"RmaxTabBarActions","Component: RmaxTabBarActions\nImport: src/design-system/Routemax/RmaxTabBarActions.tsx\n\nProps:\n  -- actions\n     Values: Type: RmaxTabBarAction[]\n     Description: N/A\n\n  -- sx\n     Values: Type: SxProps<Theme> | undefined\n     Description: N/A\n\n  -- iconSize\n     Values: Default: small\n     Description: N/A\n\n  -- gap\n     Values: Type: number | undefined\n     Description: N/A\n\nStories:\n  -- Story: Docs\n     Tags: autodocs, docs\n\n  -- Story: Default\n     Tags: autodocs, story\n     Snippet:\n       export const Default = {\n         args: {\n           actions: [\n             { icon: <UploadIcon />, tooltip: 'Upload', onClick: () => {} },\n             { icon: <SettingsIcon />, tooltip: 'Settings', onClick: () => {} },\n           ],\n         },\n       }; \n     Example:\n       const DefaultExample = () => (\n         <RmaxTabBarActions {...{\n           actions: [\n             { icon: <UploadIcon />, tooltip: 'Upload', onClick: () => {} },\n             { icon: <SettingsIcon />, tooltip: 'Settings', onClick: () => {} },\n           ],\n         },\n       }} />\n       );\n"